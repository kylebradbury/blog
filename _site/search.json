[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Digressions",
    "section": "",
    "text": "Machine learning as a metaphor for life\n\n\n\n\n\n\n\nreflections\n\n\n\n\nThree (mostly-serious) machine learning principles offer lessons professionally and personally.\n\n\n\n\n\n\nMay 9, 2021\n\n\nKyle Bradbury\n\n\n\n\n\n\n  \n\n\n\n\nMaking pretty plots in Python\n\n\n\n\n\n\n\ntutorial\n\n\n\n\nStep-by-step guide to transforming decent plots into professional plots using Python.\n\n\n\n\n\n\nJun 21, 2020\n\n\nKyle Bradbury\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/prett-plots/index.html",
    "href": "posts/prett-plots/index.html",
    "title": "Making pretty plots in Python",
    "section": "",
    "text": "In 2007, Jiro Doke of the Mathworks (makers of Matlab) changed my perspective on what plots from programming languages had the potential to be through his fantastic piece simply titled Making Pretty Graphs. Today, I think we could all make prettier, more professional graphs, and here I’ll walk through some tips for making attractive, publication-quality plots in Python with matplotlib.\nI’d like to broadly classify plots into three categories:\nMaking great plots takes more time, but can pay off in clarity and professionalism. Here, we’ll walk through one example of transforming a decent plot into a great plot."
  },
  {
    "objectID": "posts/prett-plots/index.html#start-with-a-decent-plot",
    "href": "posts/prett-plots/index.html#start-with-a-decent-plot",
    "title": "Making pretty plots in Python",
    "section": "Start with a “decent” plot",
    "text": "Start with a “decent” plot\nLet’s begin by gathering our data. Let’s make up some data that consists of reporting the efficiency of three models as you vary the size of a parameter that is in square meters; we will name these three models “A”, “B”, and “C”. We will also set a baseline efficiency value against which we want to compare all the models.\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create some data to plot\nx = [1,2,3,4,5]\ny1 = [3.64, 9.46, 16.95, 37.14, 68.22]\ny2 = [22.05, 22.49, 30.65, 53.58, 47.33]\ny3 = [16.82, 26.10, 49.61, 47.59, 95.82]\ny = [y1,y2,y3] # Store each series of the data in one list\n\nlabels = ['Model A', 'Model B', 'Model C']\nbaseline = 40\n\n\nFor the simplest “decent” plot, we use the default settings of matplotlib and a very few lines of code, making sure that we label our axes and include a legend. This quickly produces a plot that contains all of the necessary information to interpret our data, but is not overly compelling.\n\n\nCode\nplt.figure(figsize=(6,5))\n\n# Plot the baseline\nplt.plot([x[0],x[-1]],[baseline, baseline],label=\"Baseline\")\n\n# Plot the three model lines\nfor i, label in enumerate(labels):\n    plt.plot(x,y[i],label=label)\n\nplt.xlabel('Size (m^2)')\nplt.ylabel('Efficieny (%)')\nplt.legend()\nplt.tight_layout()\nplt.savefig('decent.png')\nplt.show()\n\n\n\n\n\nThis is perfect if the goal is for the author of the plot to understand the plotted data and draw conclusions. And it’s likely alright for sharing around the office or lab when we’re able to talk through this with a colleague and explain what the key takeaways are. But we can do better! How do we improve this plot and make it ready for a formal presentation of the material?"
  },
  {
    "objectID": "posts/prett-plots/index.html#distinguish-different-types-of-information",
    "href": "posts/prett-plots/index.html#distinguish-different-types-of-information",
    "title": "Making pretty plots in Python",
    "section": "1. Distinguish different types of information",
    "text": "1. Distinguish different types of information\nFirst of all, it’s not clear that the baseline is any different from the rest of the lines. In our data, the baseline is a single value that’s plotted for comparison, and should be so distinguished in the plot. Let’s start by making the baseline a different color and style from the rest of the lines to indicate it is different from the rest.\n\n\nCode\nplt.figure(figsize=(6,5))\n\n# -------------------BEGIN-CHANGES------------------------\n# Plot the baseline\nplt.plot([x[0],max(x)],[baseline, baseline],label=\"Baseline\",\n        color='lightgray',\n        linestyle='--',\n        linewidth=1)\n# --------------------END CHANGES------------------------\n\nfor i, label in enumerate(labels):\n    plt.plot(x,y[i],label=label)\n\nplt.xlabel('Size (m^2)')\nplt.ylabel('Efficieny (%)')\nplt.legend()\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "posts/prett-plots/index.html#emphasize-whats-important-by-using-colors-strategically",
    "href": "posts/prett-plots/index.html#emphasize-whats-important-by-using-colors-strategically",
    "title": "Making pretty plots in Python",
    "section": "2. Emphasize what’s important by using colors strategically",
    "text": "2. Emphasize what’s important by using colors strategically\nThe line colors in this plot are pretty random and don’t distinguish between the other lines. In some cases that may be fine if there is no reason why any one line should stand out from the rest, but for our case, we want to emphasize the top performing model (Model C) and distinguish it from the rest. This can be easily accomplished by making one line a strong color, like red in this case, and using different shades of another color to group the rest (grey in this case), causing the line we’re trying to emphasize to pop out.\n\n\nCode\nplt.figure(figsize=(6,5))\n\n# Plot the baseline\nplt.plot([x[0],max(x)],[baseline, baseline],label=\"Baseline\",\n        color='lightgray',\n        linestyle='--',\n        linewidth=1)\n\n# Define a nice color palette:\ncolors = ['#2B2F42','#8D99AE','#EF233C']\n\n# -------------------BEGIN-CHANGES------------------------\n# Plot each of the main lines\nfor i, label in enumerate(labels):\n    # Line\n    plt.plot(x,y[i],label=label,\n        color=colors[i],\n        linewidth=2)\n# --------------------END CHANGES------------------------\n\nplt.xlabel('Size (m^2)')\nplt.ylabel('Efficieny (%)')\nplt.legend()\nplt.tight_layout()\nplt.show()\n\n\n\n\n\nThe right choice of colors may be one of the most simplest ways to make your plots look unique and professional. Plots made with defaults settings are often recognizable; I can often tell whether the author of a plot used Excel, matplotlib, or ggplot2 just by the colors used in the plot and the default aesthetic.\nConsider using tools to help you choose custom color palettes for your own aesthetic. There are some great options available. The colors for this plot were chosen using Coolors (the link brings you to the specific color palette used for this plot). There are some other great tools for selecting color palettes including Paletton if you want to dive deeper into color theory and Color Brewer which can create palettes with lots of colors (up to 12 colors)."
  },
  {
    "objectID": "posts/prett-plots/index.html#ditch-the-box",
    "href": "posts/prett-plots/index.html#ditch-the-box",
    "title": "Making pretty plots in Python",
    "section": "3. Ditch the box",
    "text": "3. Ditch the box\nOur plot is already telling a much more compelling story, but there is still room for improvement. Edward Tufte, author of a number of influential data visualization books, introduced the concept of the data-to-ink ratio for plots, which states that the most “ink” (for the digital age, think pixels) in a chart should be devoted to displaying the data and not used for other components. Applying that principle here, the box doesn’t really add value. We just need some axes. Let’s remove the top and right components of the box, and leave only the y-ticks on the left of the plot.\n\n\nCode\nplt.figure(figsize=(6,5))\n\n# Plot the baseline\nplt.plot([x[0],max(x)],[baseline, baseline],label=\"Baseline\",\n        color='lightgray',\n        linestyle='--',\n        linewidth=1)\n\n# Define a nice color palette:\ncolors = ['#2B2F42','#8D99AE','#EF233C']\n\n# Plot each of the main lines\nfor i, label in enumerate(labels):\n    # Line\n    plt.plot(x,y[i],label=label,\n        color=colors[i],\n        linewidth=2)\n\n# -------------------BEGIN-CHANGES------------------------\n# Hide the all but the bottom spines (axis lines)\nax = plt.gca()\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['top'].set_visible(False)\n\n# Only show ticks on the left and bottom spines\nax.yaxis.set_ticks_position('left')\nax.xaxis.set_ticks_position('bottom')\nax.spines['bottom'].set_bounds(min(x),max(x))    \n# --------------------END CHANGES------------------------\n\nplt.xlabel('Size (m^2)')\nplt.ylabel('Efficieny (%)')\nplt.legend()\nplt.tight_layout()\nplt.show()\n\n\n\n\n\nThis helps our reader focus in on the content of the plot, since there’s little else to distract the reader."
  },
  {
    "objectID": "posts/prett-plots/index.html#make-the-legend-be-effortless-to-read",
    "href": "posts/prett-plots/index.html#make-the-legend-be-effortless-to-read",
    "title": "Making pretty plots in Python",
    "section": "4. Make the legend be effortless to read",
    "text": "4. Make the legend be effortless to read\nLegends are vital for interpreting the plot, but having a separate legend in a line plot adds in an additional layer of effort for the reader to refer back and forth to the legend to understand the data. With the reader in mind, we can make this easier, buy putting the label of the legend right at the end of the plot and coloring the text of the legend the same as the line color to make the act entirely effortless. We’ll also set the x-ticks to be whole numbers to clean up the x-axis as well.\n\n\nCode\nplt.figure(figsize=(6,5))\n\n# Plot the baseline\nplt.plot([x[0],max(x)],[baseline, baseline],label=\"Baseline\",\n        color='lightgray',\n        linestyle='--',\n        linewidth=1)\n\n# -------------------BEGIN-CHANGES------------------------\n# Plot the baseline text\nplt.text(x[-1]*1.01,baseline,\"Baseline\",\n        color='lightgray',\n        fontweight='bold',\n        horizontalalignment='left',\n        verticalalignment='center')\n# --------------------END CHANGES------------------------\n\n# Define a nice color palette:\ncolors = ['#2B2F42','#8D99AE','#EF233C']\n\n# Plot each of the main lines\nfor i, label in enumerate(labels):\n    # Line\n    plt.plot(x,y[i],label=label,\n        color=colors[i],\n        linewidth=2)\n    \n    # -------------------BEGIN-CHANGES------------------------\n    # Text\n    plt.text(x[-1]*1.01,y[i][-1],label,\n        color=colors[i],\n        fontweight='bold',\n        horizontalalignment='left',\n        verticalalignment='center')\n    # --------------------END CHANGES------------------------\n\n# Hide the all but the bottom spines (axis lines)\nax = plt.gca()\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['top'].set_visible(False)\n\n# Only show ticks on the left and bottom spines\nax.yaxis.set_ticks_position('left')\nax.xaxis.set_ticks_position('bottom')\nax.spines['bottom'].set_bounds(min(x),max(x))  \n# -------------------BEGIN-CHANGES------------------------\nplt.xticks(np.arange(min(x),max(x)+1)) \n# --------------------END CHANGES------------------------\n\nplt.xlabel('Size (m^2)')\nplt.ylabel('Efficieny (%)')\n# plt.legend()  # REMOVE THE ORIGINAL LEGEND\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "posts/prett-plots/index.html#size-fonts-for-the-reader",
    "href": "posts/prett-plots/index.html#size-fonts-for-the-reader",
    "title": "Making pretty plots in Python",
    "section": "5. Size fonts for the reader",
    "text": "5. Size fonts for the reader\nFonts can also add legibility and professionalism. Let’s increase the font size across the plot to make the text more legible. We’ll also enable TeX typesetting in our labels so that the exponent is displayed properly in the x-axis label as \\(m^2\\) rather than m^2.\n\n\nCode\nplt.figure(figsize=(6,5))\n\n# -------------------BEGIN-CHANGES------------------------\n# Define font sizes\nSIZE_DEFAULT = 14\nSIZE_LARGE = 16\nplt.rc('font', family='Roboto')           # controls default font\nplt.rc('font', weight='normal')              # controls default font\nplt.rc('font', size=SIZE_DEFAULT)       # controls default text sizes\nplt.rc('axes', titlesize=SIZE_LARGE)    # fontsize of the axes title\nplt.rc('axes', labelsize=SIZE_LARGE)    # fontsize of the x and y labels\nplt.rc('xtick', labelsize=SIZE_DEFAULT) # fontsize of the tick labels\nplt.rc('ytick', labelsize=SIZE_DEFAULT) # fontsize of the tick labels\n# --------------------END CHANGES------------------------\n\n# Plot the baseline\nplt.plot([x[0],max(x)],[baseline, baseline],label=\"Baseline\",\n        color='lightgray',\n        linestyle='--',\n        linewidth=1)\n\n# Plot the baseline text\nplt.text(x[-1]*1.01,baseline,\"Baseline\",\n        color='lightgray',\n        fontweight='bold',\n        horizontalalignment='left',\n        verticalalignment='center')\n\n# Define a nice color palette:\ncolors = ['#2B2F42','#8D99AE','#EF233C']\n\n# Plot each of the main lines\nfor i, label in enumerate(labels):\n    # Line\n    plt.plot(x,y[i],label=label,\n        color=colors[i],\n        linewidth=2)\n    \n    # Text\n    plt.text(x[-1]*1.01,y[i][-1],label,\n        color=colors[i],\n        fontweight='bold',\n        horizontalalignment='left',\n        verticalalignment='center')\n    \n# Hide the all but the bottom spines (axis lines)\nax = plt.gca()\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['top'].set_visible(False)\n\n# Only show ticks on the left and bottom spines\nax.yaxis.set_ticks_position('left')\nax.xaxis.set_ticks_position('bottom')\nax.spines['bottom'].set_bounds(min(x),max(x))    \n\n# -------------------BEGIN-CHANGES------------------------\nplt.xlabel(r'Size ($m^2$)') # Enable TeX typesetting of the superscript\n# --------------------END CHANGES-------------------------\nplt.ylabel('Efficieny (%)') \nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "posts/prett-plots/index.html#make-your-figure-crystal-clear-by-saving-at-a-high-resolution",
    "href": "posts/prett-plots/index.html#make-your-figure-crystal-clear-by-saving-at-a-high-resolution",
    "title": "Making pretty plots in Python",
    "section": "6. Make your figure crystal clear by saving at a high resolution",
    "text": "6. Make your figure crystal clear by saving at a high resolution\nThe final step is to save the figure to a crystal clear image file to be used in a presentation, publication, or whatever it may be. You’ll want to save your figure to be sufficiently high resolution so it is not blurry when you use it. You’ll certainly want the resolution to be at least 150 dots per inch (DPI) for web applications (for higher resolution monitors), with 300 DPI and above appropriate for printing. There is a tradeoff between resolution and file size that needs to be made in each case.\nI always recommend setting your figure size explicitly as well, to meet the needs of your particular application.\n\n\nCode\nplt.figure(figsize=(6,5))\n\n# Define font sizes\nSIZE_DEFAULT = 14\nSIZE_LARGE = 16\nplt.rc('font', family='Roboto')           # controls default font\nplt.rc('font', weight='normal')              # controls default font\nplt.rc('font', size=SIZE_DEFAULT)       # controls default text sizes\nplt.rc('axes', titlesize=SIZE_LARGE)    # fontsize of the axes title\nplt.rc('axes', labelsize=SIZE_LARGE)    # fontsize of the x and y labels\nplt.rc('xtick', labelsize=SIZE_DEFAULT) # fontsize of the tick labels\nplt.rc('ytick', labelsize=SIZE_DEFAULT) # fontsize of the tick labels\n\n# Plot the baseline\nplt.plot([x[0],max(x)],[baseline, baseline],label=\"Baseline\",\n        color='lightgray',\n        linestyle='--',\n        linewidth=1)\n\n# Plot the baseline text\nplt.text(x[-1]*1.01,baseline,\"Baseline\",\n        color='lightgray',\n        fontweight='bold',\n        horizontalalignment='left',\n        verticalalignment='center')\n\n# Define a nice color palette:\ncolors = ['#2B2F42','#8D99AE','#EF233C']\n\n# Plot each of the main lines\nfor i, label in enumerate(labels):\n    # Line\n    plt.plot(x,y[i],label=label,\n        color=colors[i],\n        linewidth=2)\n    \n    # Text\n    plt.text(x[-1]*1.01,y[i][-1],label,\n        color=colors[i],\n        fontweight='bold',\n        horizontalalignment='left',\n        verticalalignment='center')\n\n# Hide the all but the bottom spines (axis lines)\nax = plt.gca()\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['top'].set_visible(False)\n\n# Only show ticks on the left and bottom spines\nax.yaxis.set_ticks_position('left')\nax.xaxis.set_ticks_position('bottom')\nax.spines['bottom'].set_bounds(min(x),max(x))    \n\nplt.xlabel(r'Size ($m^2$)')\nplt.ylabel('Efficieny (%)')\nplt.tight_layout()\n\n# -------------------BEGIN-CHANGES------------------------\nplt.savefig('great.png', dpi=300)\n# --------------------END CHANGES------------------------"
  },
  {
    "objectID": "posts/prett-plots/index.html#other-recommendations",
    "href": "posts/prett-plots/index.html#other-recommendations",
    "title": "Making pretty plots in Python",
    "section": "Other recommendations",
    "text": "Other recommendations\n\nStyle guides\nOne way to develop a consistent, professional style of plot is to create or adopt a style guide that lays out practices regarding colors, fonts, and organization. A style guide can transform the act of making compelling, plots into a routine process and providing consisten professionalism. My personal favorite example is the style guide from the Urban Institute, which gives examples of multiple types of plots, typography, color palettes, and even template for producing them.\n\n\nVisualization tools: matplotlib and alternatives\nYou might be asking, in a world with wonderful plotting tools like Altair, Bokeh, Plot.ly, and Seaborn, why would we use a lower level plotting tool like matplotlib? In a word: customization. matplotlib is among the most highly customizable Python plotting tools available and allows us to adjust our plots in ways that may not be possible with other tools. The change we made with the legend in the plots above would have been challenging, if not impossible, in many other tools. matplotlib can create publication-quality graphics that tell your data story your way without the need for any additional dependencies.\nDepending on your needs, however, the other plotting tools mentioned above may be worth your consideration, especially if you’re planning on deploying interactive graphics on the web, in which matplotlib lacks capabilities. And if you need full customization for a web-based presentation of plot, I’d recommend moving away from Python and consider using D3.js. It’s likely the best tool for highly customizable web-based data graphics currently available, but requires significant knowledge of Javascript and some time to ramp up on the syntax.\n\nThe greatest value of a picture is when it forces us to notice what we never expected to see. John Tukey"
  },
  {
    "objectID": "posts/ml-metaphor/index.html",
    "href": "posts/ml-metaphor/index.html",
    "title": "Machine learning as a metaphor for life",
    "section": "",
    "text": "I recently had the pleasure of speaking at the commencement ceremony for the 2021 cohort of Masters of Interdisciplinary Data Science (MIDS) students. I couldn’t be prouder of their accomplishments. As I teach machine learning in the program, I figured I’d share three (mostly-serious) machine learning metaphors for life:\n\nChoose your cost function carefully. In machine learning, we set cost functions to tell the algorithm what to do: minimize error in predicting housing prices, for example. What is the cost function you’re optimizing? How much do you weight your career, family, friends, and personal creativity? A colleague of mine asks a question that I value asking myself regularly: “how can you help someone else succeed today?” – make sure your personal and professional relationships are part of your cost function. Most importantly, make sure your cost function, your pursuits, are defined by what you want and designed to guide you toward the person and professional you want to become.\nUse gradient descent to optimize your cost function. Gradient descent is an iterative optimization process, taking one small step at a time, and most importantly learning from that decision as to where to step next. Improvement comes from a daily struggle to grow, bit-by-bit, one matplotlib plot or database entry at a time. Optimizing your cost function requires taking some measured chances, where we may sometimes fail; but from the failure we learn improve. Over time, those small, consistent steps lead to growth and help us to become ever-better versions of ourselves in our profession and in our personal lives.\nHone your ability to develop effective representations of your data through dimensionality reduction. Every experience we have visiting a new land, every idea we create to solve a problem, these are multifaceted, high dimensional experiences. These experiences have value when we share what learn, but to share, requires that we compress these sensory, cerebral, sometimes emotional experiences into a just few words or a few pictures. Anyone who has been on a job interview (or an online date) knows how challenging it can be to create an accurate representation of yourself in a few words. Communication is the act of constructing and presenting a lower dimensional version of these high dimensional thoughts or experiences. One of the most transformative tools in your toolbox is your ability to do that effectively and efficiently – a skill that will make you stand out professionally."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I lead applied research projects at the intersection of machine learning techniques and energy problems. My research includes developing techniques for automatically mapping global energy infrastructure and access from satellite imagery; transforming smart electric utility meter data into energy efficiency insights; and exploring the reliability and cost trade-offs of energy storage systems for integrating wind and solar power into the grid.\nVisit my homepage kylebradbury.com) for more information."
  }
]